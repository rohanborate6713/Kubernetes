## 

create pod --> 
kubectl run nginx --image=nginx

to check available pod 
kubectl get pods
kubectl get pods -o wide --> get additional information

#to get detailed informatiom of how we get information from above command
how we can get pod IP address
kubectl get pods -v=7





kubectl create -f file.yml   --> to create pods from yml file
kubectl get pods   --> check list of pods 
kubectl describe pod <podname>   --> detailed information about pod
kubectl delete pod <podname>     --> delete pod 

#create a pod named as nginx
kubectl run <pod name>--image=<image name>
kubectl run nginx-pod --image=nginx

#log in into minikube cluster
minikube ssh

#create services 
kubectl create -f <service yml file name>

#get services
kubectl get services

----------------------------------------------------------------
#kind installation 

#to get the cluster information 
kubectl cluster-info --context kind-my-kind-cluster
kubectl cluster-info --context kind-<cluster_name>

#get nodes
kubectl get nodes

#kuebctl default context set
kubectl config use-context <cluster_name>

#To watch commands output after some specific period
watch get nodes 

---------------------------------------------------------------
#kubeadm 

if you have bare metal machines , means separate machines for master node and worker node 
kubeadm worker node works on 6443 port , i is required to connect worker to master

---------------------------------------------------------------
#namespaces --> 

group of K8S resources combined together basically used for isolation between pods and their relative 
K8S resources 

#get the namespaces
kubectl get namespaces / kubectl get ns

we get 

dafault -> default namespace for pods
kube-system -> here we get K8s resources 

#get pods from specific namespace
kubectl get pods -n <namespace_name>

#create namespace 
kubectl create ns <namespace-name>

#create pod in specific namespace
kubectl run <container-name> --image=<image-name> -n <namespace-name>
kubectl run nginx --image=nginx -n nginx
--------------------------

#to run manifest file 
kubectl apply -f <manifest-filename>

#to get into running pod 
kubectl exec -it pod/<podname> -n <namespace-name> -- <shell-name>    

------------------------------------------------------------------------------
#Deployment --> 

To make the pod scalable we use deployment 

#get deployment
kubectl get deployments -n <namesspace>

#scale the replicas
kubectl scale deployment/<deploymen-name> -n <namespace> --replicas=5 

#rolling update command
 kubectl set image deployment/<deploymeny-name> -n <namespace-name> <image-name>=nginx:1.27.3

 kubectl set image deployment/nginx-deployment -n nginx nginx=nginx:1.27.3

 -----------------------------------------------------------------------------
 #ReplicaSet -->

 we can use to create specific replicas but not used to do rolling updated features

 #get ReplicaSet
 kubectl get replicaset -n <namespace-name> 

 #delete 
 kubectl delete -f replicaset.yml
------------------------------------------------------------------------------
#Daemon set --> 

responsbility -> ensure that at least one replica  would run on a each available node
here we don't need to give replicas number.

------------------------------------------------------------------------------
#Job -->
used to create a specific task with yml file 
use busybox image to run the shell script

#get Job
kubectl get job -n <name-space>

kubectl logs pod/<pod-name> -n <name-space>
------------------------------------------------------------------------------
#Storage , volumes
Persistent volume 
Perssitent volume claim
storage class

-------------------------------------------------------------------------